services:
    opifer.media.listener.media_listener:
        class: Opifer\MediaBundle\Listener\MediaListener
        arguments: [@service_container]
        tags:
            - { name: doctrine.event_subscriber }

    opifer.media.provider.pool:
        class: Opifer\MediaBundle\Provider\Pool
        arguments: []


    # Form Types
    opifer.media.form.dropzone:
        class: Opifer\MediaBundle\Form\Type\DropzoneType
        tags:
            - { name: form.type, alias: dropzone }

    opifer.media.form.mediapicker:
        class: Opifer\MediaBundle\Form\Type\MediaPickerType
        arguments: [@opifer.media.provider.pool, @doctrine, @property_accessor]
        tags:
            - { name: form.type, alias: mediapicker }


    # Providers
    opifer.media.provider.image:
        class: Opifer\MediaBundle\Provider\ImageProvider
        arguments: [@gaufrette.file_storage_filesystem, @translator, @router]
        tags:
            - { name: opifer.media.provider, alias: image }

    opifer.media.provider.youtube:
        class: Opifer\MediaBundle\Provider\YoutubeProvider
        arguments: [@doctrine.orm.entity_manager, @translator, %opifer_media.providers.youtube.api_key%]
        tags:
            - { name: opifer.media.provider, alias: youtube }


    # Image processors
    opifer.media.aws_s3.client:
        class: Aws\S3\S3Client
        factory_class: Aws\S3\S3Client
        factory_method: 'factory'
        arguments:
            -
                key: %opifer_media.storages.aws_s3.key%
                secret: %opifer_media.storages.aws_s3.secret%
                region: %opifer_media.storages.aws_s3.region%

    liip_imagine.data.loader.stream.photo_storage:
        class: "%liip_imagine.binary.loader.stream.class%"
        arguments:
            - 'gaufrette://file_storage/'
        tags:
            - { name: 'liip_imagine.binary.loader', loader: 'stream.file_storage' }

    opifer.imagine.cache.resolver.amazon_s3:
        class: Liip\ImagineBundle\Imagine\Cache\Resolver\AwsS3Resolver
        arguments:
            - "@opifer.media.aws_s3.client"
            - "%opifer_media.storages.aws_s3.bucket%"
            - "public-read"
            - { https: true }
        tags:
            - { name: 'liip_imagine.cache.resolver', resolver: 'aws_storage' }
        calls:
            - [setCachePrefix, ["cache"]]
